name: Manus PR Review

on:
  pull_request:
    types:
{%- for event in manus.trigger.on %}
      - {{ event }}
{%- endfor %}
{%- if manus.trigger.labels %}
    labels:
{%- for label in manus.trigger.labels %}
      - {{ label }}
{%- endfor %}
{%- endif %}

jobs:
  manus-review:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: read
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      
      - name: Validate Environment
        run: |
          {% raw %}# Validate required secrets
          if [ -z "${{ secrets.MANUS_API_KEY }}" ]; then
            echo "‚ùå Error: MANUS_API_KEY secret not configured"
            echo "Please add MANUS_API_KEY to repository secrets:"
            echo "Settings ‚Üí Secrets and variables ‚Üí Actions ‚Üí New repository secret"
            exit 1
          fi
          
          if [ -z "${{ secrets.MANUS_GITHUB_CONNECTOR_ID }}" ]; then
            echo "‚ùå Error: MANUS_GITHUB_CONNECTOR_ID secret not configured"
            echo "Please add MANUS_GITHUB_CONNECTOR_ID to repository secrets"
            echo "Get it from: https://manus.im ‚Üí Connectors ‚Üí GitHub"
            exit 1
          fi
          {% endraw %}
          
          # Validate prompt files exist
{% for prompt_file in manus.prompts %}
          if [ ! -f ".ritual-pr/prompts/{{ prompt_file }}" ]; then
            echo "‚ùå Error: Prompt file not found: .ritual-pr/prompts/{{ prompt_file }}"
            exit 1
          fi
{% endfor %}
          echo "‚úÖ All validations passed"
      
      - name: Read Prompts
        id: prompts
        run: |
          PROMPT=""
{% for prompt_file in manus.prompts %}
          PROMPT+=$(cat .ritual-pr/prompts/{{ prompt_file }})
          PROMPT+=$'\n\n'
{% endfor %}
          {% raw %}
          echo "COMBINED_PROMPT<<EOF" >> $GITHUB_OUTPUT
          echo "$PROMPT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Trigger Manus Review
        env:
          PROMPT: ${{ steps.prompts.outputs.COMBINED_PROMPT }}
          PR_URL: ${{ github.event.pull_request.html_url }}
          PR_NUMBER: ${{ github.event.pull_request.number }}
          REPO: ${{ github.repository }}
          CONNECTOR_ID: ${{ secrets.MANUS_GITHUB_CONNECTOR_ID }}
          API_KEY: ${{ secrets.MANUS_API_KEY }}
          GH_TOKEN: ${{ github.token }}
        continue-on-error: true
        run: |
          # Build instructions
          INSTRUCTIONS="

          IMPORTANT INSTRUCTIONS FOR MANUS AI:
          1. Read existing PR comments to check if you have already reviewed this PR
          2. If you have reviewed before, focus only on NEW changes since your last review
          3. After completing your review, USE THE GITHUB CONNECTOR to post a comment on this PR
          4. Start your comment with: MANUS AI REVIEW
          5. Include your findings, recommendations, and action items
          6. Repository: $REPO, PR Number: $PR_NUMBER"
          
          # Create JSON payload
          PAYLOAD=$(jq -n \
            --arg prompt "$PROMPT" \
            --arg instructions "$INSTRUCTIONS" \
            --arg pr_url "$PR_URL" \
            --arg connector_id "$CONNECTOR_ID" \
            '{
              prompt: ($prompt + "\n\nPull Request: " + $pr_url + $instructions),
              taskMode: "agent",
              connectors: [$connector_id],
              agentProfile: "quality",
              createShareableLink: true
            }')
          
          echo "Payload size: $(echo "$PAYLOAD" | wc -c) bytes"
          
          # Retry with exponential backoff
          for attempt in 1 2 3; do
            echo "Attempt $attempt..."
            
            RESPONSE=$(echo "$PAYLOAD" | curl -s -w "\nHTTP_%{http_code}" \
              --max-time 30 \
              --connect-timeout 10 \
              --request POST \
              --url 'https://api.manus.ai/v1/tasks' \
              --header "API_KEY: $API_KEY" \
              --header 'Content-Type: application/json' \
              --data @-)
            
            HTTP_CODE=$(echo "$RESPONSE" | grep "HTTP_" | sed 's/HTTP_//')
            BODY=$(echo "$RESPONSE" | grep -v "HTTP_")
            
            echo "Status: $HTTP_CODE"
            echo "Response: $BODY"
            
            if [ "$HTTP_CODE" = "200" ]; then
              TASK_URL=$(echo "$BODY" | jq -r '.task_url // empty')
              if [ -n "$TASK_URL" ]; then
                echo "‚úÖ Manus task created: $TASK_URL"
                gh pr comment "$PR_NUMBER" --body "ü§ñ **Manus AI Review** - Review in progress: $TASK_URL" || true
                exit 0
              fi
            fi
            
            # Retry if looks like rate limiting
            if echo "$BODY" | grep -qi "too many\|rate"; then
              if [ $attempt -lt 3 ]; then
                sleep $((2 ** attempt))
                continue
              fi
            else
              break
            fi
          done
          
          echo "‚ö†Ô∏è Failed to create Manus task"
          gh pr comment "$PR_NUMBER" --body "‚ö†Ô∏è **Manus AI** - Unable to start review automatically. Manus API may be rate-limiting." || true
          exit 0
          {% endraw %}

